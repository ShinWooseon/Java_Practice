package com.abstractex02;


/* 인터페이스
 * - 완전히 미완성된 채로 남겨저 인터페이스 안에 존재하는
 * 그 어떤 메소드도 몸체가 없기 때문에 실행 부분이 존재하지 않음
 * 
 * - 인터페이스는 클래스와는 달리 다중 상속이 가능하며,
 * 인터페이스 자체도 상속이 가능함
 * 
 * 자바에서 다중 상속은 인터페이스에서 통하는 구현 방법임
 * 
 * - 인터페이스는 상수와 추상메소드만 가질 수 있으며
 * 인터페이스 안에 메소드들은, public 접근제어자로 설정되어
 * 클래스에서 구현함으로써 바로 접근이 가능함
 * 
 * 특징
 * 1. 추상클래스의 일종으로 선언만 있고 정의가 없다.
 * 2. final 변수를 가질 수 있다.
 * 3. 인터페이스는 public static final 상수만 만들 수 있다.
 * 4. 하나 이상의 인터페이스를 implements 할 수 있다.
 * 5. 인터페이스를 implements 한 클래스는 인터페이스의 모든 메소드를 Overriding 해야함
 * 6. 인터페이스가 다른 인터페이스를 상속 받을 수 있으며 이때 extends 키워드를 사용함
 * 
 * 인터페이스를 사용하는 이유
 * 1. 개발 시간을 단축시킬 수 있다. 
 * 2. 표준화가 가능하다
 * 3. 서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다.
 * 4. 독립적인 프로그래밍이 가능하다.
 * 
*/

public class DemoMain {

	public static void main(String[] args) {
		// 업 캐스팅
		// 인터페이스 객체는 상위 객체이다.
		Demo dm = new DemoIm();
		dm.print();
		
		// 에러 발생
        // dm.write();
		
		// 다운 캐스팅
		((DemoIm)dm).write();
		
		// 클래스에 정의된 메소드
		
		System.out.println(Demo.PI);
		System.out.println(Demo.a);
		
		// Demo.a = 30;
		// 이유 : final 이기 떄문에 값을 변경할 수 없음
		
		
		
	}

}
